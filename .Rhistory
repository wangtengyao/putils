}
for (i in seq_along(l)) {
do.call('<-', list(l[[i]], r[[i]]), envir=Envir)
}
}
#' Used if LHS is larger than RHS
extendToMatch <- function(source, destin) {
s <- length(source)
d <- length(destin)
# Assume that destin is a length when it is a single number and source is not
if(d==1 && s>1 && !is.null(as.numeric(destin)))
d <- destin
dif <- d - s
if (dif > 0) {
source <- rep(source, ceiling(d/s))[1:d]
}
return (source)
}
#' Grouping the left hand side
bunch = function(...) {
List <- as.list(substitute(list(...)))[-1L]
class(List) <- 'lbunch'
return(List)
}
bunch(a,b,c) %=% list('hello', 123, list('apple','orange'))
a
b
c
bunch(a,b,c) %=% 1:3
document()
install.packages("~/Dropbox/Programming/putils_1.2.1.tar.gz", repos = NULL, type = "source")
library(putils)
?putils
?vector.norm
library(putils)
?putils
library(putils)
#' Sine angle loss
#' @param U an orthonormal matrix
#' @param V an orthonormal matrix
#' @return sine angle loss between Vhat and V
#' @export
sin.theta.loss <- function(U,V){
sqrt(sum((U%*%t(U) - V%*%t(V))^2)/2)
}
library(putils)
?sin.theta.loss
sin.theta.loss
library(putils)
install.packages("~/Dropbox/Programming/putils_1.2.1.tar.gz", repos = NULL, type = "source")
?sin.theta.loss
sin.theta.loss
matrix.rank
matrix.trace
warnings()
?find.first
library(putils)
find.first
?find.first
document()
library(devtools)
install.packages('devtools')
document()
library(devtools)
document()
document()
?sin
install.packages("~/Dropbox/Programming/putils_1.2.1.tar.gz", repos = NULL, type = "source")
library(devtools)
document()
install.packages("~/Dropbox/Programming/putils_1.2.1.tar.gz", repos = NULL, type = "source")
ql <- function(A){
B <- A[,ncol(A):1]
tmp <- qr(B)
Q <- qr.Q(tmp)
R <- qr.R(tmp)
Q <- Q[,ncol(Q):1]
L <- R[nrow(R):1,ncol(R):1]
return(list(Q=Q, L=L))
}
A = matrix(rnorm(15),5,3)
ql(A)
A
diag(diag(A))
diag(diag(A), nrow=nrow(A), ncol=ncol(A))
mask <- matrix(TRUE, nrow=nrow(A), ncol=ncol(A))
diag(mask, nrow=nrow(A), ncol=ncol(A)) <- FALSE
mask <- matrix(TRUE, nrow=nrow(A), ncol=ncol(A))
diag(mask) <- FALSE
mask
isSymmetric(A)
isSymmetric(A%*%t(A))
B = (A%*%t(A))
eigen(B)
#' Compute matrix square-root of a symmetric matrix
#' @param A a symmetric matrix
#' @return a symmetric matrix whose square is equal to A
matrix.sqrt <- function(A){
if (!isSymmetric(A)) stop('A need to be a symmetric matrix.')
tmp <- eigen(A, symmetric=TRUE)
if (tmp$values[length(tmp$values)] < 0) stop('A need to be positive semidefinite')
tmp$vectors %*% diag(sqrt(tmp$values), nrow=nrow(A))  %*% t(tmp$vectors)
}
matrix.sqrt(A%*%t(A))
eigen(A%*%t(A))$values
#' Compute matrix square-root of a symmetric matrix
#' @param A a symmetric matrix
#' @return a symmetric matrix whose square is equal to A
matrix.sqrt <- function(A){
if (!isSymmetric(A)) stop('A need to be a symmetric matrix.')
tmp <- eigen(A, symmetric=TRUE)
if (tmp$values[length(tmp$values)] < -1e-12) {
stop('A need to be positive semidefinite')
} else {
tmp$values <- pmax(tmp$values, 0)
}
tmp$vectors %*% diag(sqrt(tmp$values), nrow=nrow(A))  %*% t(tmp$vectors)
}
matrix.sqrt(A%*%t(A))
matrix.sqrt(A%*%t(A))%*%matrix.sqrt(A%*%t(A))
A%*%t(A)
?power
power(A,2)
A%^%2
0.2^2.12
-1^1.2
-1.4^1.2
(-1.4)^1.2
sqrt(-1)
sqrt(-1+0i)
type(-1)
class(-1)
class(-1+0i)
as.complex(-1)
#' Compute matrix square-root of a symmetric matrix
#' @param A a symmetric matrix
#' @return a symmetric matrix whose square is equal to A
matrix.power <- function(A, power){
symm <- isSymmetric(A)
tmp <- eigen(A, symmetric=symm)
evecs <- tmp$vectors
evals <- tmp$values
if (tmp$values[length(tmp$values)] < -1e-12) {
psd <- FALSE
} else {
psd <- TRUE
tmp$values <- pmax(tmp$values, 0)
}
if (psd) {
return(evecs %*% diag(evals^power, nrow=nrow(A)) %*% t(evecs))
} else {
return(evecs %*% diag(as.complex(evals)^power, nrow=nrow(A)) %*% t(evecs))
}
}
matrix.power(B, 2)
matrix.power(B, -3)
matrix.power(B, -1)
matrix.power(B, -1) %*% B
matrix.power(B, 1/2) %*% matrix.power(B, 1/2)
B
A=B
symm <- isSymmetric(A)
tmp <- eigen(A, symmetric=symm)
evecs <- tmp$vectors
evals <- tmp$values
evals
abs(1+2i)
min(1+2i)
min(real(1+2i))
(1+2i)$real
Re(1+2i)
Re(13)
#' Compute matrix square-root of a symmetric matrix
#' @param A a symmetric matrix
#' @return a symmetric matrix whose square is equal to A
matrix.power <- function(A, power){
symm <- isSymmetric(A)
tmp <- eigen(A, symmetric=symm)
evecs <- tmp$vectors
evals <- tmp$values
evals[abs(evals) < 1e-12] <- 0
if (symm && min(Re(evals)) >=0) {
return(evecs %*% diag(evals^power, nrow=nrow(A)) %*% t(evecs))
} else {
return(evecs %*% diag(as.complex(evals)^power, nrow=nrow(A)) %*% t(evecs))
}
}
matrix.power(B, 1/2)
matrix.power(matrix.power(B, 1/2), 2)
B
matrix.power(matrix.power(B, -1/2), 2)
matrix.power(B, -1/2)
isSquare(A)
#' Compute matrix square-root of a symmetric matrix
#' @param A a square matrix
#' @param power power exponent
#' @param pseudoinverse whether to use pseudoinverse if power is negative
#' @return a symmetric matrix whose square is equal to A
matrix.power <- function(A, power, pseudoinverse=TRUE){
if (nrow(A)!=ncol(A)) stop('A need to be a square matrix.')
symm <- isSymmetric(A)
tmp <- eigen(A, symmetric=symm)
evecs <- tmp$vectors
evals <- tmp$values
evals[abs(evals) < 1e-12] <- 0
if (sum(evals==0) > 0 && power < 0){
if (!pseudoinverse){
stop()
} else {
power <- -power
evals[evals!=0] <- 1/evals[evals!=0]
}
}
if (symm && min(Re(evals)) >=0) {
return(evecs %*% diag(evals^power, nrow=nrow(A)) %*% t(evecs))
} else {
return(evecs %*% diag(as.complex(evals)^power, nrow=nrow(A)) %*% t(evecs))
}
}
matrix.power(B)
matrix.power(B, 1/2)
matrix.power(B, -1/2)
matrix.power(B, -1/2)%*%matrix.power(B,1/2)
eigen(matrix.power(B, -1/2)%*%matrix.power(B,1/2))$values
A = array(c(1,2,3,4,5,6,7,8,9,10,11,12), dim=c(2,3,4))
A
class(A)
class(c(1,2,3))
is.vector(c(1,3,m3))
is.vector(c(1,3,3))
is.matrix(c(1,2,3))
dim(A)
strsplit(dim(A))
strsplit(as.char(dim(A)))
as.character(dim(A))
paste(as.character(dim(A)), sep=',')
paste(as.character(dim(A)), sep=',', collapse=TRUE)
paste(as.character(dim(A)), collapse=',')
paste(as.character(dim(A)), collapse=', ')
sample(length(dim(A)), dim(A))
dim(A)
length(dim(A))
?sample
array(c(1,2,3),dim=c(3)
)
class(array(c(1,2,3),dim=c(3)))
is.vector(array(c(1,2,3),dim=c(3)))
A
A[c(1,2,3)]
A[[c(1,2,3)]]
?A
?array
A[matrix(c(1,2,3),3)]
A[matrix(c(1,2,3),1)]
A[matrix(c(1,2,3,1,1,1),2)]
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)#
sample(3,1)#
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
A
head(c(1,2,3),0)
head(c(1,2,3),2)
#' Show snippet of a large vector/matrix
snippet <- function(A, nrow=5, ncol=nrow){
if (is.vector(A)){
cat('Vector of length ', length(A), ', with leading entries:\n', sep='')
print(A[1:nrow])
} else if (is.matrix(A)) {
cat('Matrix with shape (', paste(as.character(dim(A)), collapse=', '),
'), with leading entries:\n')
print(A[1:nrow, 1:ncol])
} else if (is.array(A)) {
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
if (d == 1){
cat('1-d array of length ', dims, ', with leading entries:\n', sep='')
print(A[1:nrow])
} else if (d == 2){
cat('2-d array with shape (', shape, '), with leading entries:\n')
print(A[1:nrow, 1:ncol])
} else {
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d+1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d+1-i] - 1)
}
cat(d, '-d array with shape (', shape, '), with leading entries in frame [:, :, ',
paste(as.character(frames, collapse=', ')), ']:\n', sep='')
print(A[starting_index + seq_len(dims[1]*dims[2])])
}
}
}
snippet(A)
A
dims <- dim(A); d <- length(dims);
dims
shape <- paste(as.character(dim(A)), collapse=', ')
shape
frames <- rep(0, d-2); starting_index <- 0
frames
for (i in seq_len(d-2)){
frames[d+1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d+1-i] - 1)
}
starting_index
frames
seq_len(d-2)
d
frames <- rep(0, d-2); starting_index <- 0
frames
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
frames
starting_index
#' Show snippet of a large vector/matrix
snippet <- function(A, nrow=5, ncol=nrow){
if (is.vector(A)){
cat('Vector of length ', length(A), ', with leading entries:\n', sep='')
print(A[1:nrow])
} else if (is.matrix(A)) {
cat('Matrix with shape (', paste(as.character(dim(A)), collapse=', '),
'), with leading entries:\n')
print(A[1:nrow, 1:ncol])
} else if (is.array(A)) {
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
if (d == 1){
cat('1-d array of length ', dims, ', with leading entries:\n', sep='')
print(A[1:nrow])
} else if (d == 2){
cat('2-d array with shape (', shape, '), with leading entries:\n')
print(A[1:nrow, 1:ncol])
} else {
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
cat(d, '-d array with shape (', shape, '), with leading entries in frame [:, :, ',
paste(as.character(frames, collapse=', ')), ']:\n', sep='')
print(matrix(A[starting_index + seq_len(dims[1]*dims[2])], dims[1], dims[2]))
}
}
}
snippet(A)
snippet(A)
snippet(A)
snippet(A)
snippet(A)
snippet(A)
A <- array(1:48, c(2,3,4,2))
A
snippet(A)
#' Show snippet of a large vector/matrix
snippet <- function(A, nrow=5, ncol=nrow){
if (is.vector(A)){
cat('Vector of length ', length(A), ', with leading entries:\n', sep='')
print(A[1:min(length(A), nrow)])
} else if (is.matrix(A)) {
cat('Matrix with shape (', paste(as.character(dim(A)), collapse=', '),
'), with leading entries:\n')
print(A[1:min(nrow, nrow(A)), 1:min(ncol, ncol(A))])
} else if (is.array(A)) {
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
if (d == 1){
cat('1-d array of length ', dims, ', with leading entries:\n', sep='')
print(A[1:min(length(A), nrow)])
} else if (d == 2){
cat('2-d array with shape (', shape, '), with leading entries:\n')
print(A[1:min(nrow, nrow(A)), 1:min(ncol, ncol(A))])
} else {
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
cat(d, '-d array with shape (', shape, '), with leading entries in frame [:, :, ',
paste(as.character(frames, collapse=', ')), ']:\n', sep='')
M <- matrix(A[starting_index + seq_len(dims[1]*dims[2])], dims[1], dims[2])
print(M[1:min(nrow, nrow(M)), 1:min(ncol, ncol(M))])
}
}
}
A <- array(sample(100), c(10,8,4,9,5))
snippet(A)
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
frames <- rep(0, d-2); starting_index <- 0
frames
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
frames
paste(as.character(frames, collapse=', ')
)
paste(as.character(frames, collapse=', '))
#' Show snippet of a large vector/matrix
snippet <- function(A, nrow=5, ncol=nrow){
if (is.vector(A)){
cat('Vector of length ', length(A), ', with leading entries:\n', sep='')
print(A[1:min(length(A), nrow)])
} else if (is.matrix(A)) {
cat('Matrix with shape (', paste(as.character(dim(A)), collapse=', '),
'), with leading entries:\n')
print(A[1:min(nrow, nrow(A)), 1:min(ncol, ncol(A))])
} else if (is.array(A)) {
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
if (d == 1){
cat('1-d array of length ', dims, ', with leading entries:\n', sep='')
print(A[1:min(length(A), nrow)])
} else if (d == 2){
cat('2-d array with shape (', shape, '), with leading entries:\n')
print(A[1:min(nrow, nrow(A)), 1:min(ncol, ncol(A))])
} else {
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
cat(d, '-d array with shape (', shape, '), with leading entries in frame [:, :, ',
paste(as.character(frames) collapse=', '), ']:\n', sep='')
M <- matrix(A[starting_index + seq_len(dims[1]*dims[2])], dims[1], dims[2])
print(M[1:min(nrow, nrow(M)), 1:min(ncol, ncol(M))])
}
}
}
#' Show snippet of a large vector/matrix
snippet <- function(A, nrow=5, ncol=nrow){
if (is.vector(A)){
cat('Vector of length ', length(A), ', with leading entries:\n', sep='')
print(A[1:min(length(A), nrow)])
} else if (is.matrix(A)) {
cat('Matrix with shape (', paste(as.character(dim(A)), collapse=', '),
'), with leading entries:\n')
print(A[1:min(nrow, nrow(A)), 1:min(ncol, ncol(A))])
} else if (is.array(A)) {
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
if (d == 1){
cat('1-d array of length ', dims, ', with leading entries:\n', sep='')
print(A[1:min(length(A), nrow)])
} else if (d == 2){
cat('2-d array with shape (', shape, '), with leading entries:\n')
print(A[1:min(nrow, nrow(A)), 1:min(ncol, ncol(A))])
} else {
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
cat(d, '-d array with shape (', shape, '), with leading entries in frame [:, :, ',
paste(as.character(frames) collapse=', '), ']:\n', sep='')
M <- matrix(A[starting_index + seq_len(dims[1]*dims[2])], dims[1], dims[2])
print(M[1:min(nrow, nrow(M)), 1:min(ncol, ncol(M))])
}
}
}
#' Show snippet of a large vector/matrix
snippet <- function(A, nrow=5, ncol=nrow){
if (is.vector(A)){
cat('Vector of length ', length(A), ', with leading entries:\n', sep='')
print(A[seq_len(min(length(A), nrow))])
} else if (is.matrix(A)) {
cat('Matrix with shape (', paste(as.character(dim(A)), collapse=', '),
'), with leading entries:\n')
print(A[seq_len(min(nrow, nrow(A))), seq_len(min(ncol, ncol(A)))])
} else if (is.array(A)) {
dims <- dim(A); d <- length(dims);
shape <- paste(as.character(dim(A)), collapse=', ')
if (d == 1){
cat('1-d array of length ', dims, ', with leading entries:\n', sep='')
print(A[seq_len(min(length(A), nrow))])
} else if (d == 2){
cat('2-d array with shape (', shape, '), with leading entries:\n')
print(A[seq_len(min(nrow, nrow(A))), seq_len(min(ncol, ncol(A)))])
} else {
frames <- rep(0, d-2); starting_index <- 0
for (i in seq_len(d-2)){
frames[d-1-i] <- sample(dims[d+1-i], 1)
starting_index <- starting_index + prod(head(dims, d-i)) * (frames[d-1-i] - 1)
}
cat(d, '-d array with shape (', shape, '), with leading entries in frame [:, :, ',
paste(as.character(frames), collapse=', '), ']:\n', sep='')
M <- matrix(A[starting_index + seq_len(dims[1]*dims[2])], dims[1], dims[2])
print(M[seq_len(min(nrow, nrow(M))), seq_len(min(ncol, ncol(M)))])
}
}
}
snippet(A)
A[2,2,2,3,5]
snippet(A,3)
library(devtools)
document()
package <- as.package('.')
load_all(package)
install.packages("~/Dropbox/Programming/putils_1.2.2.tar.gz", repos = NULL, type = "source")
